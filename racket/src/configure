#! /bin/sh

# Using `--enable-csdefault` or `--enable-csonly` avoids running
# `cfg-racket` and only uses `cfg-cs` and `cs/c/configure`.

# Using `--enable-cs` uses both `cfg-racket` and `cs/c/configure`.

set -e

dir=`dirname "$0"`

use_cs=no
use_racket=yes

for arg in $*; do 
  case "$arg" in
    --enable-cs)
      use_cs=yes
      ;;
    --enable-csdefault | --enable-csonly)
      use_racket=no
      use_cs=yes
      ;;
    --help | -h)
      echo $0:
      echo see --help-racket or --help-cs, since the traditional Racket "(3m/CGC)" build
      echo and the Chez Scheme "(CS)" build support different options. If you use
      echo options that build both CS and 3m/CGC, then you can mix options that apply
      echo to both or either kind of build.
      exit 0
      ;;
    --help-racket)
      exec "$dir/cfg-racket" --help
      ;;
    --help-cs)
      exec "$dir/cs/c/configure" --help
      ;;
  esac
done

if test "$use_cs" = "yes" ; then
  # The "cs/c/configure" script doesn't report the installation
  # configuration, so we run it first and let "cfg-cs" or
  # "cfg-racket" report that information.

  mkdir -p cs/c
  case "$dir" in
    /*)
     (cd cs/c && "$dir/cs/c/configure" ${1+"$@"})
     ;;
    *)
     (cd cs/c && "../../$dir/cs/c/configure" ${1+"$@"})
     ;;
  esac
fi

if test "$use_racket" = "no" ; then
  exec "$dir/cfg-cs" ${1+"$@"}
else
  exec "$dir/cfg-racket" ${1+"$@"}
fi
